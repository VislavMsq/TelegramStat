package org.stb.util;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.stb.bot.MyWebhookBot;import org.telegram.telegrambots.meta.api.methods.groupadministration.GetChatAdministrators;import org.telegram.telegrambots.meta.api.methods.groupadministration.GetChatMember;import org.telegram.telegrambots.meta.api.methods.send.SendMessage;import org.telegram.telegrambots.meta.api.methods.updatingmessages.DeleteMessage;import org.telegram.telegrambots.meta.api.objects.Update;import org.telegram.telegrambots.meta.api.objects.User;import org.telegram.telegrambots.meta.api.objects.chatmember.ChatMember;import org.telegram.telegrambots.meta.exceptions.TelegramApiException;import java.time.Instant;import java.time.LocalDateTime;import java.time.ZoneId;import java.util.List;import java.util.stream.Collectors;public class Util {    private static final Logger DELETER = LoggerFactory.getLogger(DeletedMessageInfo.class);    public static LocalDateTime convertToLocalDateTime(int timestamp) {        return LocalDateTime.ofInstant(Instant.ofEpochSecond(timestamp), ZoneId.systemDefault());    }    public static boolean isUserAdmin(Long chatId, Long userId, MyWebhookBot bot) throws TelegramApiException {        GetChatMember getChatMember = new GetChatMember();        getChatMember.setChatId(chatId);        getChatMember.setUserId(userId);        ChatMember c = bot.execute(getChatMember);        if (c.getUser().getIsBot()) {            return true;        }        List<Long> chatAdministratorsId = bot.execute(new GetChatAdministrators(String.valueOf(chatId))).stream()                .map(ChatMember::getUser)                .map(User::getId)                .collect(Collectors.toList());        return chatAdministratorsId.contains(userId);    }    public static void delete(Update update, MyWebhookBot bot) throws TelegramApiException {//        if (isLikeMedia(update.getMessage())) {//            DELETER.info("Медіа було видалено");//        } else {        DELETER.info(update.getMessage().getText());//        }        DeleteMessage deleteMessage = new DeleteMessage();        deleteMessage.setChatId(update.getMessage().getChatId());        deleteMessage.setMessageId(update.getMessage().getMessageId());        bot.execute(deleteMessage);    }    public static void delete(Long chatId, Integer messageId, MyWebhookBot bot) throws TelegramApiException {        DeleteMessage deleteMessage = new DeleteMessage();        deleteMessage.setChatId(chatId);        deleteMessage.setMessageId(messageId);        bot.execute(deleteMessage);    }    public static SendMessage toMessage(long chatId, String text, String parsemode) {        SendMessage message = toMessage(chatId, text);        message.setParseMode(parsemode);        return message;    }    public static SendMessage toMessage(long chatId, String text) {        SendMessage message = new SendMessage();        message.setChatId(chatId);        message.setText(text);        return message;    }//    InlineKeyboardMarkup markupInline = new InlineKeyboardMarkup();//    List<List<InlineKeyboardButton>> rowsInline = new ArrayList<>();//    List<InlineKeyboardButton> rowInline = new ArrayList<>();//        for (Channel channel : channelRepository.findAll()) {//        if (channel.containsAdmin(update.getMessage().getFrom().getId())) {////            InlineKeyboardButton button = new InlineKeyboardButton();////            button.setText(channel.getTitle());//            button.setCallbackData("turnOffAdvertise " + channel.getId());////            rowInline.add(button);//        }//    }//        rowsInline.add(rowInline);//        markupInline.setKeyboard(rowsInline);////    SendMessage message = new SendMessage();//        message.setChatId(update.getMessage().getFrom().getId());//        message.setText("Оберіть канал якому вимкнути рекламку");//        message.setReplyMarkup(markupInline);////        bot.execute(message);}